# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import common_pb2 as common__pb2

GRPC_GENERATED_VERSION = '1.68.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in common_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class BackendStub(object):
    """Definisi layanan gRPC
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProsesTransaksi = channel.unary_unary(
                '/common.Backend/ProsesTransaksi',
                request_serializer=common__pb2.TransactionRequest.SerializeToString,
                response_deserializer=common__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.KirimKeStok = channel.unary_unary(
                '/common.Backend/KirimKeStok',
                request_serializer=common__pb2.StokUpdateRequest.SerializeToString,
                response_deserializer=common__pb2.StokUpdateResponse.FromString,
                _registered_method=True)
        self.AmbilLaporan = channel.unary_unary(
                '/common.Backend/AmbilLaporan',
                request_serializer=common__pb2.LaporanRequest.SerializeToString,
                response_deserializer=common__pb2.LaporanResponse.FromString,
                _registered_method=True)


class BackendServicer(object):
    """Definisi layanan gRPC
    """

    def ProsesTransaksi(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def KirimKeStok(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AmbilLaporan(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BackendServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProsesTransaksi': grpc.unary_unary_rpc_method_handler(
                    servicer.ProsesTransaksi,
                    request_deserializer=common__pb2.TransactionRequest.FromString,
                    response_serializer=common__pb2.TransactionResponse.SerializeToString,
            ),
            'KirimKeStok': grpc.unary_unary_rpc_method_handler(
                    servicer.KirimKeStok,
                    request_deserializer=common__pb2.StokUpdateRequest.FromString,
                    response_serializer=common__pb2.StokUpdateResponse.SerializeToString,
            ),
            'AmbilLaporan': grpc.unary_unary_rpc_method_handler(
                    servicer.AmbilLaporan,
                    request_deserializer=common__pb2.LaporanRequest.FromString,
                    response_serializer=common__pb2.LaporanResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'common.Backend', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('common.Backend', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Backend(object):
    """Definisi layanan gRPC
    """

    @staticmethod
    def ProsesTransaksi(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/common.Backend/ProsesTransaksi',
            common__pb2.TransactionRequest.SerializeToString,
            common__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def KirimKeStok(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/common.Backend/KirimKeStok',
            common__pb2.StokUpdateRequest.SerializeToString,
            common__pb2.StokUpdateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AmbilLaporan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/common.Backend/AmbilLaporan',
            common__pb2.LaporanRequest.SerializeToString,
            common__pb2.LaporanResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class StokBarangStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UpdateStok = channel.unary_unary(
                '/common.StokBarang/UpdateStok',
                request_serializer=common__pb2.StokUpdateRequest.SerializeToString,
                response_deserializer=common__pb2.StokUpdateResponse.FromString,
                _registered_method=True)
        self.AddStok = channel.unary_unary(
                '/common.StokBarang/AddStok',
                request_serializer=common__pb2.AddStokRequest.SerializeToString,
                response_deserializer=common__pb2.AddStokResponse.FromString,
                _registered_method=True)


class StokBarangServicer(object):
    """Missing associated documentation comment in .proto file."""

    def UpdateStok(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddStok(self, request, context):
        """RPC baru untuk penambahan stok
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StokBarangServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UpdateStok': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateStok,
                    request_deserializer=common__pb2.StokUpdateRequest.FromString,
                    response_serializer=common__pb2.StokUpdateResponse.SerializeToString,
            ),
            'AddStok': grpc.unary_unary_rpc_method_handler(
                    servicer.AddStok,
                    request_deserializer=common__pb2.AddStokRequest.FromString,
                    response_serializer=common__pb2.AddStokResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'common.StokBarang', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('common.StokBarang', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class StokBarang(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def UpdateStok(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/common.StokBarang/UpdateStok',
            common__pb2.StokUpdateRequest.SerializeToString,
            common__pb2.StokUpdateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddStok(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/common.StokBarang/AddStok',
            common__pb2.AddStokRequest.SerializeToString,
            common__pb2.AddStokResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
